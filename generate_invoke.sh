#if 0

#// RUN: %clang_cc1 -std=c++23 -triple wasm32-unknown-unknown -emit-llvm -o - %s | FileCheck %s
#// CHECK: Delete this before committing

set -e

TMP=/tmp/vararg-frame.ll
RESSUFFIX=Transforms/ExpandVariadics/invoke.ll
RES=$HOME/llvm-project/llvm/test/$RESSUFFIX

$HOME/llvm-build/llvm/bin/clang++ -std=c++23 -fwasm-exceptions -target wasm32-unknown-unknown -O1 -emit-llvm -xc++ $HOME/GPU/generate_invoke.sh  -S -o $TMP
  
echo '; NOTE: Assertions have been autogenerated by utils/update_test_checks.py' > $RES
echo '; RUN: opt -mtriple=wasm32-unknown-unknown -S --passes=expand-variadics --expand-variadics-override=optimize < %s | FileCheck %s -check-prefixes=CHECK' >> $RES
echo '; RUN: not --crash opt -mtriple=wasm32-unknown-unknown -S --passes=expand-variadics --expand-variadics-override=lowering < %s | FileCheck %s -check-prefixes=ERROR' >> $RES

cat $TMP >> $RES
sed -E -i \
  -e '/^source.filename.*$/d' \
  -e '/^; ModuleID.*$/d' \
  -e '/^!llvm/d' \
  -e '/^attributes #[0-9]+ =.*$/d' \
  -e '/^![0-9]+ = !.*$/d' \
  -e 's$ local_unnamed_addr$$g' \
  -e 's/ #[0-9]+$//' \
  -e 's/ #[0-9]+ [{]$/ {/' \
  $RES

sed -E -i \
  -e :L -e N -e 's/^\n$//' -e 't L' \
  $RES


#   -e 's$[.]coerce$$g'

llvm_regen.sh $RESSUFFIX

sed -E -i \
  -e 's/^target triple.*$/\n; ERROR: Badger something/g' \
  $RES


exit 0
#endif


extern "C"
{

void may_throw(...);
void dont_throw(...) noexcept;


// Multiple catch clauses w/o catch-all
void test0(int x) {
  try {
    may_throw(x);
  } catch (int) {
    dont_throw(x);
  }
}

}
